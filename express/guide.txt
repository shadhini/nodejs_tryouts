#### Start Server ####
go to bin/www --> right click and Run , or run using configurations
--> check http://localhost:3000


#### Project Structure ####
express project
|
|-- bin
|   |-- www.js (startup script: it has bunch of core settings,
|              create a server, tell it what port to listen to.
|              kicks off app.js)
|
|-- public (files that the users are going to be able to access: anything for the public; not directly related to server files )
|   |-- images
|   |-- javascripts
|   |-- stylesheets
|
|-- routes (the brains behind each page)
|   |      (each different page typically is gonna have its own route file)
|   |-- index.js
|   |-- users.js
|
|-- views (HTML for each page)
|   |-- error.ejs
|   |-- index.ejs
|
|-- app.js (core behind your project)


#### What happens when we run this project ####

1. call startup script (bin/www.js)
    set up your server
    basic configuration settings
    tells what port to listen to
2. kicks off app.js
    core foundation of your nodejs project
    whenever user comes to your website and makes a request, app.js gonna look at that request and depending on the URL
    figure out how to handle that responds appropriately

#### Add New Page ####----------------------------------------------------
@views directory
    <new_page>.ejs
    <!DOCTYPE html>
    <html>
      <head>
        <title><%= title %></title>
        <link rel='stylesheet' href='/stylesheets/style.css' />
      </head>
      <body>
        <h1><%= title %></h1>
        <p>Welcome to <%= title %></p>
      </body>
    </html>

@routes directory
    <new_page_name>.js
    var express = require('express');
    var router = express.Router();

    /* GET home page. */
    router.get('/', function(req, res, next) {
      res.render('new_page', { title: 'Express' }); // renders a view, in this case, views/index.ejs
    });

    module.exports = router;

@app.js:
    var newRouter = require('./routes/index');

    app.use('/new', newRouter);

------------------------------------------------------------------


#### EJS: Embedded JavaScript ####
EJS vs Jade
* with ejs we include javascript with little weird symbols (%=)
  it's plain HTML, and anytime you wanna include variable or JavaScript or anything, in addition to HTTML, you can use these weird little symbols
* but with Jade it doesn't look like HTML at all, it just looks lika a bunch of words and kind of like Python


whenever you want to use a variable
    <%= [variable name] %>

whenever you wanna use plain JavaScript, other than variable, such as loops, switches, if statements; i.e. basic Java Script
    <% [JS code] %>

variable assignment
* whenever a user makes a request foe a page, it looks at js file for the requested page
* and this js file renders the ejs file while passing variables to it as a JSON object


#### Navigation Links ####
If we manually add navigation links in each page, if new page comes up, we will have to put navigation link for that page in every page
How to solve this ? ...
create new directory
views/templates

@views/templates
    add header.ejs

then @index.ejs
        <% include templates/header.ejs %>


----------------------------------------------
reformat code --> ctrl + shift + alt + L
----------------------------------------------

#### Local Variables to App ####
this pretty much means global variables that you can use anywhere in your entire program
@app.js
    app.locals.points = "0,713";
use @index.ejs


#### JSON data ####
JSON data is JavaScript object
Since it is a object it self to assign JSON file to a local variable, we don't need string or anything
we can directly assign the file
since it is not a module, we need t give the explicit ath with extension right
@app.js
    app.locals.videodata = require('./videodata.json')
@index.ejs
    <h3><%= videodata.categoryName %></h3>
        <ul>
          <% videodata.categories.forEach(function (item) { %>
              <li><%= item.categoryName %></li>
          <% }); %>
        </ul>
